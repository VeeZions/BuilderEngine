<?php

namespace VeeZions\BuilderEngine\DependencyInjection;

use Symfony\Component\Config\Definition\Builder\TreeBuilder;
use Symfony\Component\Config\Definition\ConfigurationInterface;
use VeeZions\BuilderEngine\Constant\ConfigConstant;

class BuilderEngineConfiguration implements ConfigurationInterface
{
    public function getConfigTreeBuilder(): TreeBuilder
    {
        $treeBuilder = new TreeBuilder(ConfigConstant::CONFIG_FILE_NAME);

        /**@phpstan-ignore-next-lines */
        $treeBuilder->getRootNode()
            ->children()
                ->arrayNode('author_providers')
                    ->addDefaultsIfNotSet()
                    ->children()
                        ->arrayNode('articles')
                            ->addDefaultsIfNotSet()
                            ->children()
                                ->scalarNode('author_class')->defaultValue(null)->end()
                                ->scalarNode('author_role')->defaultValue(null)->end()
                                ->scalarNode('author_placeholder')
                                    ->defaultValue('id')
                                    ->treatNullLike('id')
                                ->end()
                            ->end()
                        ->end()
                        ->arrayNode('pages')
                            ->addDefaultsIfNotSet()
                            ->children()
                                ->scalarNode('author_class')->defaultValue(null)->end()
                                ->scalarNode('author_role')->defaultValue(null)->end()
                                ->scalarNode('author_placeholder')
                                    ->defaultValue('id')
                                    ->treatNullLike('id')
                                ->end()
                            ->end()
                        ->end()
                    ->end()
                ->end()
                ->arrayNode('library_config')
                    ->addDefaultsIfNotSet()
                    ->children()
                        ->scalarNode('driver')
                            ->defaultValue(ConfigConstant::CONFIG_DEFAULT_DRIVER)
                            ->example([ConfigConstant::CONFIG_DEFAULT_DRIVER, ConfigConstant::CONFIG_S3_DRIVER])
                            ->isRequired()
                            ->cannotBeEmpty()
                        ->end()
                        ->scalarNode('max_upload_file')->defaultValue(ini_get('upload_max_filesize'))->end()
                        ->scalarNode('service')->defaultValue(null)->end()
                        ->scalarNode('s3_bucket')
                            ->defaultValue(null)
                            ->info('If you are using "'.ConfigConstant::CONFIG_S3_DRIVER.' driver", you must set this value.')
                        ->end()
                        ->scalarNode('s3_cdn_url')
                            ->defaultValue(null)
                            ->info('If you are using "'.ConfigConstant::CONFIG_S3_DRIVER.' driver", you can set this value to your CDN URL.')
                        ->end()
                        ->arrayNode('liip_filter_sets')
                            ->scalarPrototype()->end()
                        ->end()
                    ->end()
                ->end()
                ->scalarNode('mode')
                    ->defaultValue(ConfigConstant::CONFIG_MODE_DEFAULT)
                    ->info('Possible values: '.ConfigConstant::CONFIG_MODE_DEFAULT.', '.ConfigConstant::CONFIG_MODE_FORM)
                    ->cannotBeEmpty()
                ->end()
                ->scalarNode('locale_fallback')
                    ->defaultValue('en_GB')
                    ->treatNullLike('en_GB')
                    ->info('Full locale name, e.g. "en_US" to use in default locale fields.')
                ->end()
                ->scalarNode('crud_prefix')
                    ->defaultValue(ConfigConstant::CONFIG_DEFAULT_CRUD_PREFIX)
                    ->info('Add a prefix to controllers URLs in "'.ConfigConstant::CONFIG_MODE_DEFAULT.'" mode')
                ->end()
                ->scalarNode('extended_template')
                    ->defaultValue(ConfigConstant::CONFIG_EXTENDED_TEMPLATE)
                    ->cannotBeEmpty()
                    ->info('Use your own extended template in "'.ConfigConstant::CONFIG_MODE_DEFAULT.'" mode')
                ->end()
                ->scalarNode('extended_front_template')
                    ->defaultValue(ConfigConstant::CONFIG_EXTENDED_FRONT_TEMPLATE)
                    ->cannotBeEmpty()
                    ->info('Use your own extended template in "'.ConfigConstant::CONFIG_MODE_DEFAULT.'" mode')
                ->end()
                ->scalarNode('form_theme')
                    ->defaultValue(ConfigConstant::CONFIG_DEFAULT_FORM_THEME)
                    ->info('form_theme to use in builder forms in "'.ConfigConstant::CONFIG_MODE_DEFAULT.'" mode')
                ->end()
                ->booleanNode('internal_css')
                    ->defaultValue(true)
                    ->treatNullLike(true)
                    ->info('Internal CSS to use with HTML tables in "'.ConfigConstant::CONFIG_MODE_DEFAULT.'" mode')
                ->end()
                ->booleanNode('page_title_display')
                    ->defaultValue(true)
                    ->treatNullLike(true)
                    ->info('Display page title or not in "'.ConfigConstant::CONFIG_MODE_DEFAULT.'" mode')
                ->end()
                ->arrayNode('pagination_buttons')
                    ->addDefaultsIfNotSet()
                    ->children()
                        ->scalarNode('first_button')
                            ->defaultValue(ConfigConstant::CONFIG_INTERNAL_TEMPLATE_PATH.'/icons/pagination-first.html.twig')
                            ->cannotBeEmpty()
                        ->end()
                        ->scalarNode('previous_button')
                            ->defaultValue(ConfigConstant::CONFIG_INTERNAL_TEMPLATE_PATH.'/icons/pagination-previous.html.twig')
                            ->cannotBeEmpty()
                        ->end()
                        ->scalarNode('next_button')
                            ->defaultValue(ConfigConstant::CONFIG_INTERNAL_TEMPLATE_PATH.'/icons/pagination-next.html.twig')
                            ->cannotBeEmpty()
                        ->end()
                        ->scalarNode('last_button')
                            ->defaultValue(ConfigConstant::CONFIG_INTERNAL_TEMPLATE_PATH.'/icons/pagination-last.html.twig')
                            ->cannotBeEmpty()
                        ->end()
                    ->end()
                ->end()
                ->arrayNode('crud_buttons')
                    ->addDefaultsIfNotSet()
                    ->children()
                        ->scalarNode('edit_label')
                            ->defaultValue(ConfigConstant::CONFIG_INTERNAL_TEMPLATE_PATH.'/table/crud-edit.html.twig')
                            ->cannotBeEmpty()
                        ->end()
                        ->scalarNode('delete_label')
                            ->defaultValue(ConfigConstant::CONFIG_INTERNAL_TEMPLATE_PATH.'/table/crud-delete.html.twig')
                            ->cannotBeEmpty()
                        ->end()
                    ->end()
                ->end()
                ->arrayNode('front_routes')
                    ->addDefaultsIfNotSet()
                    ->info('Set frontend routes.')
                    ->children()
                        ->scalarNode('blog')
                            ->defaultValue(ConfigConstant::CONFIG_DEFAULT_BLOG_ROUTE)
                            ->cannotBeEmpty()
                        ->end()
                        ->scalarNode('article')
                            ->defaultValue(ConfigConstant::CONFIG_DEFAULT_ARTICLE_ROUTE)
                            ->cannotBeEmpty()
                        ->end()
                        ->scalarNode('category')
                            ->defaultValue(ConfigConstant::CONFIG_DEFAULT_CATEGORY_ROUTE)
                            ->cannotBeEmpty()
                        ->end()
                    ->end()
                ->end()
                ->arrayNode('custom_routes')
                    ->addDefaultsIfNotSet()
                    ->info('Set customs routes if "'.ConfigConstant::CONFIG_MODE_DEFAULT.'" mode is active.')
                    ->children()
                        ->arrayNode('articles_routes')
                            ->addDefaultsIfNotSet()
                            ->children()
                                ->scalarNode('list')
                                    ->defaultValue(ConfigConstant::CONFIG_DEFAULT_ROUTES['articles_routes']['list'])
                                    ->cannotBeEmpty()
                                ->end()
                                ->scalarNode('new')
                                    ->defaultValue(ConfigConstant::CONFIG_DEFAULT_ROUTES['articles_routes']['new'])
                                    ->cannotBeEmpty()
                                ->end()
                                ->scalarNode('edit')
                                    ->defaultValue(ConfigConstant::CONFIG_DEFAULT_ROUTES['articles_routes']['edit'])
                                    ->cannotBeEmpty()
                                ->end()
                                ->scalarNode('delete')
                                    ->defaultValue(ConfigConstant::CONFIG_DEFAULT_ROUTES['articles_routes']['delete'])
                                    ->cannotBeEmpty()
                                ->end()
                            ->end()
                        ->end()
                        ->arrayNode('categories_routes')
                            ->addDefaultsIfNotSet()
                            ->children()
                                ->scalarNode('list')
                                    ->defaultValue(ConfigConstant::CONFIG_DEFAULT_ROUTES['categories_routes']['list'])
                                    ->cannotBeEmpty()
                                ->end()
                                ->scalarNode('new')
                                    ->defaultValue(ConfigConstant::CONFIG_DEFAULT_ROUTES['categories_routes']['new'])
                                    ->cannotBeEmpty()
                                ->end()
                                ->scalarNode('edit')
                                    ->defaultValue(ConfigConstant::CONFIG_DEFAULT_ROUTES['categories_routes']['edit'])
                                    ->cannotBeEmpty()
                                ->end()
                                ->scalarNode('delete')
                                    ->defaultValue(ConfigConstant::CONFIG_DEFAULT_ROUTES['categories_routes']['delete'])
                                    ->cannotBeEmpty()
                                ->end()
                            ->end()
                        ->end()
                        ->arrayNode('pages_routes')
                            ->addDefaultsIfNotSet()
                            ->children()
                                ->scalarNode('list')
                                    ->defaultValue(ConfigConstant::CONFIG_DEFAULT_ROUTES['pages_routes']['list'])
                                    ->cannotBeEmpty()
                                ->end()
                                ->scalarNode('new')
                                    ->defaultValue(ConfigConstant::CONFIG_DEFAULT_ROUTES['pages_routes']['new'])
                                    ->cannotBeEmpty()
                                ->end()
                                ->scalarNode('edit')
                                    ->defaultValue(ConfigConstant::CONFIG_DEFAULT_ROUTES['pages_routes']['edit'])
                                    ->cannotBeEmpty()
                                ->end()
                                ->scalarNode('delete')
                                    ->defaultValue(ConfigConstant::CONFIG_DEFAULT_ROUTES['pages_routes']['delete'])
                                    ->cannotBeEmpty()
                                ->end()
                            ->end()
                        ->end()
                        ->arrayNode('navigations_routes')
                            ->addDefaultsIfNotSet()
                            ->children()
                                ->scalarNode('list')
                                    ->defaultValue(ConfigConstant::CONFIG_DEFAULT_ROUTES['navigations_routes']['list'])
                                    ->cannotBeEmpty()
                                ->end()
                                ->scalarNode('new')
                                    ->defaultValue(ConfigConstant::CONFIG_DEFAULT_ROUTES['navigations_routes']['new'])
                                    ->cannotBeEmpty()
                                ->end()
                                ->scalarNode('edit')
                                    ->defaultValue(ConfigConstant::CONFIG_DEFAULT_ROUTES['navigations_routes']['edit'])
                                    ->cannotBeEmpty()
                                ->end()
                                ->scalarNode('delete')
                                    ->defaultValue(ConfigConstant::CONFIG_DEFAULT_ROUTES['navigations_routes']['delete'])
                                    ->cannotBeEmpty()
                                ->end()
                            ->end()
                        ->end()
                    ->end()
                ->end()
                ->arrayNode('actions')
                    ->addDefaultsIfNotSet()
                    ->info('Set granted roles to allow access to each actions like ["ROLE_USER"] for each controller in "'.ConfigConstant::CONFIG_MODE_DEFAULT.'" mode.')
                    ->children()
                        ->arrayNode('categories')
                            ->addDefaultsIfNotSet()
                            ->children()
                                ->arrayNode('new')
                                    ->addDefaultsIfNotSet()
                                    ->children()
                                        ->booleanNode('enabled')->defaultValue(true)->treatNullLike(true)->end()
                                        ->arrayNode('roles')->scalarPrototype()->end()->end()
                                    ->end()
                                ->end()
                                ->arrayNode('edit')
                                    ->addDefaultsIfNotSet()
                                    ->children()
                                        ->booleanNode('enabled')->defaultValue(true)->treatNullLike(true)->end()
                                        ->arrayNode('roles')->scalarPrototype()->end()->end()
                                    ->end()
                                ->end()
                                ->arrayNode('delete')
                                    ->addDefaultsIfNotSet()
                                    ->children()
                                        ->booleanNode('enabled')->defaultValue(true)->treatNullLike(true)->end()
                                        ->arrayNode('roles')->scalarPrototype()->end()->end()
                                    ->end()
                                ->end()
                            ->end()
                        ->end()
                        ->arrayNode('articles')
                            ->addDefaultsIfNotSet()
                            ->children()
                                ->arrayNode('new')
                                    ->addDefaultsIfNotSet()
                                    ->children()
                                        ->booleanNode('enabled')->defaultValue(true)->treatNullLike(true)->end()
                                        ->arrayNode('roles')->scalarPrototype()->end()->end()
                                    ->end()
                                ->end()
                                ->arrayNode('edit')
                                    ->addDefaultsIfNotSet()
                                    ->children()
                                        ->booleanNode('enabled')->defaultValue(true)->treatNullLike(true)->end()
                                        ->arrayNode('roles')->scalarPrototype()->end()->end()
                                    ->end()
                                ->end()
                                ->arrayNode('delete')
                                    ->addDefaultsIfNotSet()
                                    ->children()
                                        ->booleanNode('enabled')->defaultValue(true)->treatNullLike(true)->end()
                                        ->arrayNode('roles')->scalarPrototype()->end()->end()
                                    ->end()
                                ->end()
                            ->end()
                        ->end()
                        ->arrayNode('pages')
                            ->addDefaultsIfNotSet()
                            ->children()
                                ->arrayNode('new')
                                    ->addDefaultsIfNotSet()
                                    ->children()
                                        ->booleanNode('enabled')->defaultValue(true)->treatNullLike(true)->end()
                                        ->arrayNode('roles')->scalarPrototype()->end()->end()
                                    ->end()
                                ->end()
                                ->arrayNode('edit')
                                    ->addDefaultsIfNotSet()
                                    ->children()
                                        ->booleanNode('enabled')->defaultValue(true)->treatNullLike(true)->end()
                                        ->arrayNode('roles')->scalarPrototype()->end()->end()
                                    ->end()
                                ->end()
                                ->arrayNode('delete')
                                    ->addDefaultsIfNotSet()
                                    ->children()
                                        ->booleanNode('enabled')->defaultValue(true)->treatNullLike(true)->end()
                                        ->arrayNode('roles')->scalarPrototype()->end()->end()
                                    ->end()
                                ->end()
                            ->end()
                        ->end()
                        ->arrayNode('navigations')
                            ->addDefaultsIfNotSet()
                            ->children()
                                ->arrayNode('new')
                                    ->addDefaultsIfNotSet()
                                    ->children()
                                        ->booleanNode('enabled')->defaultValue(true)->treatNullLike(true)->end()
                                        ->arrayNode('roles')->scalarPrototype()->end()->end()
                                    ->end()
                                ->end()
                                ->arrayNode('edit')
                                    ->addDefaultsIfNotSet()
                                    ->children()
                                        ->booleanNode('enabled')->defaultValue(true)->treatNullLike(true)->end()
                                        ->arrayNode('roles')->scalarPrototype()->end()->end()
                                    ->end()
                                ->end()
                                ->arrayNode('delete')
                                    ->addDefaultsIfNotSet()
                                    ->children()
                                        ->booleanNode('enabled')->defaultValue(true)->treatNullLike(true)->end()
                                        ->arrayNode('roles')->scalarPrototype()->end()->end()
                                    ->end()
                                ->end()
                            ->end()
                        ->end()
                        ->arrayNode('libraries')
                            ->addDefaultsIfNotSet()
                            ->children()
                                ->arrayNode('delete')
                                    ->addDefaultsIfNotSet()
                                    ->children()
                                        ->booleanNode('enabled')->defaultValue(true)->treatNullLike(true)->end()
                                        ->arrayNode('roles')->scalarPrototype()->end()->end()
                                    ->end()
                                ->end()
                            ->end()
                        ->end()
                    ->end()
                ->end()
            ->end()
        ;

        return $treeBuilder;
    }
}
